# This file is a template, and might need editing before it works on your project.
image: golang:latest

variables:
  # Please edit to your GitLab project
  REPO_NAME: gitlab.com/InfoBlogFriends/server

# The problem is that to be able to use go get, one needs to put
# the repository in the $GOPATH. So for example if your gitlab domain
# is gitlab.com, and that your repository is namespace/project, and
# the default GOPATH being /go, then you'd need to have your
# repository in /go/src/gitlab.com/namespace/project
# Thus, making a symbolic link corrects this.
before_script:

stages:
  - lint
  - test
  - build
  - deploy

.go-cache:
  before_script:
    - mkdir -p .go
    - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
    - ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
    - cd $GOPATH/src/$REPO_NAME
    - curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.30.0
    - golangci-lint --version
  cache:
    paths:
      - $GOPATH
lint:
  stage: lint
  extends: .go-cache
  script:
    - go fmt $(go list ./... | grep -v /vendor/)
    - go vet $(go list ./... | grep -v /vendor/)
    - golangci-lint run --skip-dirs docs

test:
  stage: test
  extends: .go-cache
  script:
    - go test -race $(go list ./... | grep -v /vendor/)

compile:
  stage: build
  extends: .go-cache
  script:
    - go build -race -ldflags "-extldflags '-static'" -o $CI_PROJECT_DIR/app
  artifacts:
    paths:
      - app

deploy_production:
  image: alpine:3
  stage: deploy
  script:
    - echo "Deploy to production server"
  environment:
    name: production
    url: https://infoblog.ptflp.ru
  only:
    - main

deploy_stage:
  image: alpine:3
  stage: deploy
  script:
    - echo "Deploy to production server"
  environment:
    name: stage
    url: https://infoblog.ptflp.ru
  when: manual
  only:
    - dev